<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CallToActionTitle" xml:space="preserve">
    <value>Prêt à démarrer ?</value>
  </data>
  <data name="HowItWorksPrivateChannelsParagraph" xml:space="preserve">
    <value>Pour les conversations en temps réel, vous pouvez créer un canal privé. Grâce au chiffrement de bout en bout, chaque message d'un canal est chiffré sur votre appareil et peut être déchiffré uniquement par votre destinataire. Bien que cela nécessite que les deux utilisateurs soient connectés, cette approche offre un niveau de sécurité encore plus élevé.</value>
  </data>
  <data name="HowItWorksPrivateChannelsTitle" xml:space="preserve">
    <value>Canaux privés :</value>
  </data>
  <data name="HowItWorksPrivateNotesParagraph" xml:space="preserve">
    <value>Écrivez une note privée, choisissez un mot de passe, sélectionnez une durée de vie et envoyez-la ! Vous obtiendrez un lien privé à partager avec votre destinataire. Nos notes sont protégées par mot de passe, chiffré sur votre équipement et peuvent être configurées pour exister de 1 heure à 5 jours. Une fois votre note lue, elle est automatiquement détruite de nos serveurs, ce qui garantit que vos informations ne pourront plus être consultées.</value>
  </data>
  <data name="HowItWorksPrivateNotesTitle" xml:space="preserve">
    <value>Notes privés :</value>
  </data>
  <data name="HowItWorksTitle" xml:space="preserve">
    <value>Comment ça fonctionne ?</value>
  </data>
  <data name="IntroParagraph" xml:space="preserve">
    <value>Bienvenue sur Private-Channel.com, votre partenaire de confiance pour des conversations sécurisées et privées. Que vous cherchiez à envoyer un simple mot de passe, à avoir une conversation privée ou à échanger des informations confidentielles, nous proposons des mesures de sécurité de haut niveau pour garantir la confidentialité de vos échanges.</value>
  </data>
  <data name="MainTitle" xml:space="preserve">
    <value>Protéger vos secrets avec Private-Channel</value>
  </data>
  <data name="NewChannelButton" xml:space="preserve">
    <value>Créer un canal</value>
  </data>
  <data name="NewNoteButton" xml:space="preserve">
    <value>Créer une note</value>
  </data>
  <data name="SubTitle" xml:space="preserve">
    <value>Canaux et notes privés et cryptés pour toutes vos conversations confidentielles</value>
  </data>
  <data name="TrustUsParagraph" xml:space="preserve">
    <value>Avec Private-Channel.com, vous choisissez la rapidité, la sécurité et la transparence. Notre site Web est conçu dans un souci de rapidité pour vous permettre de communiquer rapidement et efficacement. La sécurité est au cœur de ce que nous faisons - nous utilisons des protocoles de cryptage avancés pour sécuriser vos messages. La sécurité étant une question de confiance, tout notre code sera bientôt disponible sur GitHub !</value>
  </data>
  <data name="TrustUsTitle" xml:space="preserve">
    <value>Pourquoi nous faire confiance ?</value>
  </data>
</root>